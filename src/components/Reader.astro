
<!-- <p class="text-white font-bold text-6xl" id="message">
  For a moment, nothing happened. Then, after a second or so, nothing continued to happen.
</p> -->


<h1>Real-time Autocue</h1>
    <button id="startBtn">Start</button>
    <button id="stopBtn" disabled>Stop</button>
    <div id="text-container" class="text-4xl"></div>

    <script>
      const sentence = "I want to drive my car down to the shops and buy some apples";
      const words = sentence.split(' ');
      const textContainer = document.getElementById('text-container');
      const startBtn = document.getElementById('startBtn');
      const stopBtn = document.getElementById('stopBtn');

      textContainer.innerHTML = words.map(word => `<span>${word}</span>`).join(' ');

      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      const SpeechGrammarList = window.SpeechGrammarList || window.webkitSpeechGrammarList;

      const recognition = new SpeechRecognition();
      const speechRecognitionList = new SpeechGrammarList();

      const grammar = `#JSGF V1.0; grammar words; public <word> = ${words.join(' | ')};`;
      speechRecognitionList.addFromString(grammar, 1);

      recognition.grammars = speechRecognitionList;
      recognition.lang = 'en-US';
      recognition.interimResults = true;
      recognition.continuous = true;
      recognition.maxAlternatives = 5;

      let currentWordIndex = 0;
      let recognitionTimeout;

      function levenshteinDistance(a, b) {
          if (a.length === 0) return b.length;
          if (b.length === 0) return a.length;

          const matrix = [];

          for (let i = 0; i <= b.length; i++) {
              matrix[i] = [i];
          }

          for (let j = 0; j <= a.length; j++) {
              matrix[0][j] = j;
          }

          for (let i = 1; i <= b.length; i++) {
              for (let j = 1; j <= a.length; j++) {
                  if (b.charAt(i - 1) === a.charAt(j - 1)) {
                      matrix[i][j] = matrix[i - 1][j - 1];
                  } else {
                      matrix[i][j] = Math.min(
                          matrix[i - 1][j - 1] + 1,
                          matrix[i][j - 1] + 1,
                          matrix[i - 1][j] + 1
                      );
                  }
              }
          }

          return matrix[b.length][a.length];
      }

      function areSimilar(word1, word2, threshold = 0.7) {
          const distance = levenshteinDistance(word1.toLowerCase(), word2.toLowerCase());
          const maxLength = Math.max(word1.length, word2.length);
          const similarity = 1 - distance / maxLength;
          return similarity >= threshold;
      }

      function highlightWord(index) {
          if (index < words.length) {
              textContainer.children[index].classList.add('highlight');
          }
      }

      recognition.onresult = function(event) {
          clearTimeout(recognitionTimeout);
          const result = event.results[event.results.length - 1];
          const transcript = result[0].transcript.trim().toLowerCase();
          
          console.log('Transcript:', transcript); // For debugging

          const recognizedWords = transcript.split(' ');
          let matchFound = false;

          for (let i = 0; i < recognizedWords.length; i++) {
              for (let j = currentWordIndex; j < words.length; j++) {
                  const recognizedWord = recognizedWords[i];
                  const expectedWord = words[j].toLowerCase();

                  if (areSimilar(recognizedWord, expectedWord) || 
                      expectedWord.includes(recognizedWord) || 
                      recognizedWord.includes(expectedWord)) {
                      
                      // Highlight all words up to and including the matched word
                      for (let k = currentWordIndex; k <= j; k++) {
                          highlightWord(k);
                      }
                      currentWordIndex = j + 1;
                      matchFound = true;
                      break;
                  }
              }
              if (matchFound) break;
          }

          if (currentWordIndex >= words.length) {
              recognition.stop();
              stopBtn.disabled = true;
              startBtn.disabled = false;
          }
      };

      recognition.onsoundstart = function() {
          console.log('Sound started');
      };

      recognition.onsoundend = function() {
          console.log('Sound ended');
          recognition.stop();
          recognition.start(); // Restart to continue listening
      };

      recognition.onend = function() {
          console.log('Recognition ended');
      };

      startBtn.addEventListener('click', () => {
          currentWordIndex = 0;
          Array.from(textContainer.children).forEach(span => span.classList.remove('highlight'));
          recognition.start();
          startBtn.disabled = true;
          stopBtn.disabled = false;

          recognitionTimeout = setTimeout(() => {
              recognition.stop();
              recognition.start(); // Restart recognition every 5 seconds
          }, 5000);
      });

      stopBtn.addEventListener('click', () => {
          recognition.stop();
          clearTimeout(recognitionTimeout);
          stopBtn.disabled = true;
          startBtn.disabled = false;
      });
  </script>